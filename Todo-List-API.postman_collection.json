{
  "info": {
    "name": "Todo List API",
    "description": "Complete Postman collection for Todo List API with authentication and CRUD operations",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000/api",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "todo_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "API Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            },
            "description": "Check if the API is running and healthy"
          },
          "response": [
            {
              "name": "Success Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/health",
                  "host": ["{{base_url}}"],
                  "path": ["health"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Todo List API is running\",\n  \"timestamp\": \"2024-01-15T10:30:00.000Z\",\n  \"version\": \"1.0.0\"\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "User Registration",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.token) {",
                  "        pm.collectionVariables.set('jwt_token', response.data.token);",
                  "        pm.collectionVariables.set('user_id', response.data.user._id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"johndoe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePass123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/signup",
              "host": ["{{base_url}}"],
              "path": ["auth", "signup"]
            },
            "description": "Register a new user account"
          },
          "response": [
            {
              "name": "Successful Registration",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"johndoe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePass123\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/signup",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "signup"]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"User registered successfully\",\n  \"data\": {\n    \"user\": {\n      \"_id\": \"60f7b3b3b3b3b3b3b3b3b3b3\",\n      \"username\": \"johndoe\",\n      \"email\": \"john.doe@example.com\",\n      \"createdAt\": \"2024-01-15T10:30:00.000Z\",\n      \"updatedAt\": \"2024-01-15T10:30:00.000Z\"\n    },\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MGY3YjNiM2IzYjNiM2IzYjNiM2IzYjNiM2IzIiwiaWF0IjoxNjQyMjQ4NjAwLCJleHAiOjE2NDI4NTM0MDB9.example_token_here\"\n  }\n}"
            },
            {
              "name": "Validation Error",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"jo\",\n  \"email\": \"invalid-email\",\n  \"password\": \"123\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/signup",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "signup"]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": false,\n  \"message\": \"Validation failed\",\n  \"errors\": [\n    {\n      \"field\": \"username\",\n      \"message\": \"Username must be between 3 and 30 characters\"\n    },\n    {\n      \"field\": \"email\",\n      \"message\": \"Please provide a valid email\"\n    },\n    {\n      \"field\": \"password\",\n      \"message\": \"Password must be at least 6 characters long\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "User Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.token) {",
                  "        pm.collectionVariables.set('jwt_token', response.data.token);",
                  "        pm.collectionVariables.set('user_id', response.data.user._id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePass123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": ["{{base_url}}"],
              "path": ["auth", "login"]
            },
            "description": "Login with existing user credentials"
          },
          "response": [
            {
              "name": "Successful Login",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePass123\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/login",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "login"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Login successful\",\n  \"data\": {\n    \"user\": {\n      \"_id\": \"60f7b3b3b3b3b3b3b3b3b3b3\",\n      \"username\": \"johndoe\",\n      \"email\": \"john.doe@example.com\",\n      \"createdAt\": \"2024-01-15T10:30:00.000Z\",\n      \"updatedAt\": \"2024-01-15T10:30:00.000Z\"\n    },\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MGY3YjNiM2IzYjNiM2IzYjNiM2IzYjNiM2IzIiwiaWF0IjoxNjQyMjQ4NjAwLCJleHAiOjE2NDI4NTM0MDB9.example_token_here\"\n  }\n}"
            },
            {
              "name": "Invalid Credentials",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"wrongpassword\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/login",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "login"]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": false,\n  \"message\": \"Invalid email or password\"\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "Todos",
      "item": [
        {
          "name": "Get All Todos",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/todos?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["todos"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Number of todos per page"
                },
                {
                  "key": "completed",
                  "value": "false",
                  "description": "Filter by completion status",
                  "disabled": true
                },
                {
                  "key": "priority",
                  "value": "high",
                  "description": "Filter by priority level",
                  "disabled": true
                }
              ]
            },
            "description": "Get all todos for the authenticated user with pagination and filtering options"
          },
          "response": [
            {
              "name": "Success with Todos",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/todos?page=1&limit=10",
                  "host": ["{{base_url}}"],
                  "path": ["todos"],
                  "query": [
                    {
                      "key": "page",
                      "value": "1"
                    },
                    {
                      "key": "limit",
                      "value": "10"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Todos retrieved successfully\",\n  \"data\": {\n    \"todos\": [\n      {\n        \"_id\": \"60f7b3b3b3b3b3b3b3b3b3b4\",\n        \"title\": \"Complete project documentation\",\n        \"description\": \"Write comprehensive API documentation for the Todo List API\",\n        \"completed\": false,\n        \"priority\": \"high\",\n        \"dueDate\": \"2024-01-20T00:00:00.000Z\",\n        \"user\": \"60f7b3b3b3b3b3b3b3b3b3b3\",\n        \"createdAt\": \"2024-01-15T10:30:00.000Z\",\n        \"updatedAt\": \"2024-01-15T10:30:00.000Z\"\n      },\n      {\n        \"_id\": \"60f7b3b3b3b3b3b3b3b3b3b5\",\n        \"title\": \"Review code changes\",\n        \"description\": \"Review and test all code changes before deployment\",\n        \"completed\": true,\n        \"priority\": \"medium\",\n        \"dueDate\": \"2024-01-18T00:00:00.000Z\",\n        \"user\": \"60f7b3b3b3b3b3b3b3b3b3b3\",\n        \"createdAt\": \"2024-01-15T09:15:00.000Z\",\n        \"updatedAt\": \"2024-01-15T11:45:00.000Z\"\n      }\n    ],\n    \"total\": 2,\n    \"page\": 1,\n    \"limit\": 10,\n    \"pages\": 1\n  }\n}"
            },
            {
              "name": "Empty List",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/todos",
                  "host": ["{{base_url}}"],
                  "path": ["todos"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Todos retrieved successfully\",\n  \"data\": {\n    \"todos\": [],\n    \"total\": 0,\n    \"page\": 1,\n    \"limit\": 10,\n    \"pages\": 0\n  }\n}"
            }
          ]
        },
        {
          "name": "Create Todo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.todo && response.data.todo._id) {",
                  "        pm.collectionVariables.set('todo_id', response.data.todo._id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Complete project documentation\",\n  \"description\": \"Write comprehensive API documentation for the Todo List API including all endpoints, authentication flow, and usage examples\",\n  \"priority\": \"high\",\n  \"dueDate\": \"2024-01-20\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/todos",
              "host": ["{{base_url}}"],
              "path": ["todos"]
            },
            "description": "Create a new todo with all optional fields"
          },
          "response": [
            {
              "name": "Todo Created Successfully",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Complete project documentation\",\n  \"description\": \"Write comprehensive API documentation for the Todo List API including all endpoints, authentication flow, and usage examples\",\n  \"priority\": \"high\",\n  \"dueDate\": \"2024-01-20\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/todos",
                  "host": ["{{base_url}}"],
                  "path": ["todos"]
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Todo created successfully\",\n  \"data\": {\n    \"todo\": {\n      \"_id\": \"60f7b3b3b3b3b3b3b3b3b3b4\",\n      \"title\": \"Complete project documentation\",\n      \"description\": \"Write comprehensive API documentation for the Todo List API including all endpoints, authentication flow, and usage examples\",\n      \"completed\": false,\n      \"priority\": \"high\",\n      \"dueDate\": \"2024-01-20T00:00:00.000Z\",\n      \"user\": \"60f7b3b3b3b3b3b3b3b3b3b3\",\n      \"createdAt\": \"2024-01-15T10:30:00.000Z\",\n      \"updatedAt\": \"2024-01-15T10:30:00.000Z\"\n    }\n  }\n}"
            },
            {
              "name": "Validation Error",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"\",\n  \"description\": \"This is a very long description that exceeds the maximum allowed length of 500 characters. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.\",\n  \"priority\": \"invalid_priority\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/todos",
                  "host": ["{{base_url}}"],
                  "path": ["todos"]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": false,\n  \"message\": \"Validation failed\",\n  \"errors\": [\n    {\n      \"field\": \"title\",\n      \"message\": \"Title is required\"\n    },\n    {\n      \"field\": \"description\",\n      \"message\": \"Description cannot exceed 500 characters\"\n    },\n    {\n      \"field\": \"priority\",\n      \"message\": \"Priority must be low, medium, or high\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get Todo by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/todos/{{todo_id}}",
              "host": ["{{base_url}}"],
              "path": ["todos", "{{todo_id}}"]
            },
            "description": "Get a specific todo by its ID"
          },
          "response": [
            {
              "name": "Todo Found",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/todos/60f7b3b3b3b3b3b3b3b3b3b4",
                  "host": ["{{base_url}}"],
                  "path": ["todos", "60f7b3b3b3b3b3b3b3b3b3b4"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Todo retrieved successfully\",\n  \"data\": {\n    \"todo\": {\n      \"_id\": \"60f7b3b3b3b3b3b3b3b3b3b4\",\n      \"title\": \"Complete project documentation\",\n      \"description\": \"Write comprehensive API documentation for the Todo List API including all endpoints, authentication flow, and usage examples\",\n      \"completed\": false,\n      \"priority\": \"high\",\n      \"dueDate\": \"2024-01-20T00:00:00.000Z\",\n      \"user\": \"60f7b3b3b3b3b3b3b3b3b3b3\",\n      \"createdAt\": \"2024-01-15T10:30:00.000Z\",\n      \"updatedAt\": \"2024-01-15T10:30:00.000Z\"\n    }\n  }\n}"
            },
            {
              "name": "Todo Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/todos/60f7b3b3b3b3b3b3b3b3b3b9",
                  "host": ["{{base_url}}"],
                  "path": ["todos", "60f7b3b3b3b3b3b3b3b3b3b9"]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": false,\n  \"message\": \"Todo not found\"\n}"
            }
          ]
        },
        {
          "name": "Update Todo",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Complete project documentation - Updated\",\n  \"description\": \"Write comprehensive API documentation for the Todo List API including all endpoints, authentication flow, and usage examples. Updated with additional requirements.\",\n  \"completed\": true,\n  \"priority\": \"medium\",\n  \"dueDate\": \"2024-01-25\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/todos/{{todo_id}}",
              "host": ["{{base_url}}"],
              "path": ["todos", "{{todo_id}}"]
            },
            "description": "Update an existing todo with all fields"
          },
          "response": [
            {
              "name": "Todo Updated Successfully",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"title\": \"Complete project documentation - Updated\",\n  \"description\": \"Write comprehensive API documentation for the Todo List API including all endpoints, authentication flow, and usage examples. Updated with additional requirements.\",\n  \"completed\": true,\n  \"priority\": \"medium\",\n  \"dueDate\": \"2024-01-25\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/todos/60f7b3b3b3b3b3b3b3b3b3b4",
                  "host": ["{{base_url}}"],
                  "path": ["todos", "60f7b3b3b3b3b3b3b3b3b3b4"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Todo updated successfully\",\n  \"data\": {\n    \"todo\": {\n      \"_id\": \"60f7b3b3b3b3b3b3b3b3b3b4\",\n      \"title\": \"Complete project documentation - Updated\",\n      \"description\": \"Write comprehensive API documentation for the Todo List API including all endpoints, authentication flow, and usage examples. Updated with additional requirements.\",\n      \"completed\": true,\n      \"priority\": \"medium\",\n      \"dueDate\": \"2024-01-25T00:00:00.000Z\",\n      \"user\": \"60f7b3b3b3b3b3b3b3b3b3b3\",\n      \"createdAt\": \"2024-01-15T10:30:00.000Z\",\n      \"updatedAt\": \"2024-01-15T12:15:00.000Z\"\n    }\n  }\n}"
            },
            {
              "name": "Partial Update",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"completed\": true\n}"
                },
                "url": {
                  "raw": "{{base_url}}/todos/{{todo_id}}",
                  "host": ["{{base_url}}"],
                  "path": ["todos", "{{todo_id}}"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Todo updated successfully\",\n  \"data\": {\n    \"todo\": {\n      \"_id\": \"60f7b3b3b3b3b3b3b3b3b3b4\",\n      \"title\": \"Complete project documentation\",\n      \"description\": \"Write comprehensive API documentation for the Todo List API\",\n      \"completed\": true,\n      \"priority\": \"high\",\n      \"dueDate\": \"2024-01-20T00:00:00.000Z\",\n      \"user\": \"60f7b3b3b3b3b3b3b3b3b3b3\",\n      \"createdAt\": \"2024-01-15T10:30:00.000Z\",\n      \"updatedAt\": \"2024-01-15T12:30:00.000Z\"\n    }\n  }\n}"
            }
          ]
        },
        {
          "name": "Delete Todo",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/todos/{{todo_id}}",
              "host": ["{{base_url}}"],
              "path": ["todos", "{{todo_id}}"]
            },
            "description": "Delete a specific todo by its ID"
          },
          "response": [
            {
              "name": "Todo Deleted Successfully",
              "originalRequest": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/todos/60f7b3b3b3b3b3b3b3b3b3b4",
                  "host": ["{{base_url}}"],
                  "path": ["todos", "60f7b3b3b3b3b3b3b3b3b3b4"]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"message\": \"Todo deleted successfully\"\n}"
            },
            {
              "name": "Todo Not Found for Deletion",
              "originalRequest": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{jwt_token}}"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/todos/60f7b3b3b3b3b3b3b3b3b3b9",
                  "host": ["{{base_url}}"],
                  "path": ["todos", "60f7b3b3b3b3b3b3b3b3b3b9"]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": false,\n  \"message\": \"Todo not found\"\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Unauthorized Access",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/todos",
              "host": ["{{base_url}}"],
              "path": ["todos"]
            },
            "description": "Attempt to access protected route without authentication"
          },
          "response": [
            {
              "name": "Unauthorized Response",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/todos",
                  "host": ["{{base_url}}"],
                  "path": ["todos"]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": false,\n  \"message\": \"Access denied. No token provided.\"\n}"
            }
          ]
        },
        {
          "name": "Invalid JWT Token",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid_token_here"
              }
            ],
            "url": {
              "raw": "{{base_url}}/todos",
              "host": ["{{base_url}}"],
              "path": ["todos"]
            },
            "description": "Attempt to access protected route with invalid JWT token"
          },
          "response": [
            {
              "name": "Invalid Token Response",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer invalid_token_here"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/todos",
                  "host": ["{{base_url}}"],
                  "path": ["todos"]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": false,\n  \"message\": \"Invalid token.\"\n}"
            }
          ]
        },
        {
          "name": "User Already Exists",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"johndoe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePass123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/signup",
              "host": ["{{base_url}}"],
              "path": ["auth", "signup"]
            },
            "description": "Attempt to register with existing email/username"
          },
          "response": [
            {
              "name": "User Already Exists",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"johndoe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePass123\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/signup",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "signup"]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": false,\n  \"message\": \"User with this email or username already exists\"\n}"
            }
          ]
        }
      ]
    },
    {
      "name": "Test Data Setup",
      "item": [
        {
          "name": "Create Test User 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.token) {",
                  "        pm.collectionVariables.set('jwt_token_user1', response.data.token);",
                  "        pm.collectionVariables.set('user1_id', response.data.user._id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"alice_smith\",\n  \"email\": \"alice.smith@example.com\",\n  \"password\": \"AlicePass123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/signup",
              "host": ["{{base_url}}"],
              "path": ["auth", "signup"]
            },
            "description": "Create test user Alice Smith"
          }
        },
        {
          "name": "Create Test User 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.token) {",
                  "        pm.collectionVariables.set('jwt_token_user2', response.data.token);",
                  "        pm.collectionVariables.set('user2_id', response.data.user._id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"bob_jones\",\n  \"email\": \"bob.jones@example.com\",\n  \"password\": \"BobPass123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/signup",
              "host": ["{{base_url}}"],
              "path": ["auth", "signup"]
            },
            "description": "Create test user Bob Jones"
          }
        },
        {
          "name": "Create Sample Todos for User 1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.todo && response.data.todo._id) {",
                  "        pm.collectionVariables.set('todo1_id', response.data.todo._id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token_user1}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Plan vacation to Hawaii\",\n  \"description\": \"Research flights, hotels, and activities for a 2-week vacation in Hawaii\",\n  \"priority\": \"high\",\n  \"dueDate\": \"2024-02-15\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/todos",
              "host": ["{{base_url}}"],
              "path": ["todos"]
            },
            "description": "Create a high-priority todo for user 1"
          }
        },
        {
          "name": "Create Sample Todos for User 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.todo && response.data.todo._id) {",
                  "        pm.collectionVariables.set('todo2_id', response.data.todo._id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token_user2}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Learn Node.js and Express\",\n  \"description\": \"Complete online course on Node.js and Express.js framework\",\n  \"priority\": \"medium\",\n  \"dueDate\": \"2024-03-01\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/todos",
              "host": ["{{base_url}}"],
              "path": ["todos"]
            },
            "description": "Create a medium-priority todo for user 2"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set default base URL if not already set",
          "if (!pm.collectionVariables.get('base_url')) {",
          "    pm.collectionVariables.set('base_url', 'http://localhost:3000/api');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script for all requests",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has success field', function () {",
          "    const response = pm.response.json();",
          "    pm.expect(response).to.have.property('success');",
          "});",
          "",
          "pm.test('Response has message field', function () {",
          "    const response = pm.response.json();",
          "    pm.expect(response).to.have.property('message');",
          "});"
        ]
      }
    }
  ]
}
